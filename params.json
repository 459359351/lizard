{"name":"Lizard","tagline":"A simple code complexity analyzer without caring about the C/C++ header files or Java imports.","body":"Lizard\r\n======\r\nWas hfcca, A Header Free Cyclomatic Complexity Analyzer.\r\n\r\n[![Build Status](https://travis-ci.org/terryyin/lizard.png?branch=master)](https://travis-ci.org/terryyin/lizard)\r\n\r\nlizard is a simple code complexity analyzer without caring about the C/C++ \r\nheader files or Java imports. It can deal with\r\n\r\n* Java\r\n* C/C++\r\n* Objective C.\r\n\r\nIt counts \r\n\r\n* the nloc (lines of code without comments), \r\n* CCN (cyclomatic complexity number),\r\n* token count of functions.\r\n* parameter count of functions.\r\n\r\nYou can set limitation for CCN (-C), the number of parameters (-a). Functions\r\nthat exceed these limitations will generate warnings. The exit code of lizard\r\nwill be none-Zero if there are warnings. \r\n\r\nThis tool actually calculates how complex the code 'looks' rather than how\r\ncomplex the code real 'is'. People will need this tool because it's often very\r\nhard to get all the included folders and files right when they are complicated.\r\nBut we don't really need that kind of accuracy when come to cyclomatic\r\ncomplexity.\r\n\r\nIt requires python2.6 or above (early versions are not verified).\r\n\r\n##Installation\r\n\r\nlizard.py is only a single python file, and everything is in that single script. You can always use it without any installation.\r\n\r\n<pre>\r\npython lizard.py\r\n</pre>\r\n\r\nIf you want a proper install:\r\n\r\n<pre>\r\n[sudo] pip install lizard\r\n</pre>\r\n\r\nOr if you've got the source:\r\n\r\n<pre>\r\n[sudo] python setup.py install\r\n</pre>\r\n\r\n##Usage\r\n\r\n<pre>\r\nlizard [options] [PATH or FILE] [PATH] ... \r\n</pre>\r\nRun for the code under current folder (recursively):\r\n<pre>\r\nlizard\r\n</pre>\r\nExclude anything in the tests folder:\r\n```\r\nlizard mySource/ -x\"./tests/*\"\r\n```\r\n\r\n### Options\r\n\r\n```\r\n  --version             show program's version number and exit\r\n  -h, --help            show this help message and exit\r\n  -v, --verbose         Output in verbose mode (long function name)\r\n  -C CCN, --CCN=CCN     Threshold for cyclomatic complexity number warning.\r\n                        The default value is 15. Functions with CCN bigger\r\n                        than this number will generate warning\r\n  -a ARGUMENTS, --arguments=ARGUMENTS\r\n                        Limit for number of parameters\r\n  -w, --warnings_only   Show warnings only, using clang/gcc's warning format\r\n                        for printing warnings.\r\n                        http://clang.llvm.org/docs/UsersManual.html#cmdoption-\r\n                        fdiagnostics-format\r\n  -i NUMBER, --ignore_warnings=NUMBER\r\n                        If the number of warnings is equal or less than the\r\n                        number, the tool will exit normally, otherwize it will\r\n                        generate error. Useful in makefile when improving\r\n                        legacy code.\r\n  -x EXCLUDE, --exclude=EXCLUDE\r\n                        Exclude files that match this pattern. * matches\r\n                        everything, ? matches any single characoter,\r\n                        \"./folder/*\" exclude everything in the folder,\r\n                        recursively. Multiple patterns can be specified. Don't\r\n                        forget to add \"\" around the pattern.\r\n  -X, --xml             Generate XML in cppncss style instead of the normal\r\n                        tabular output. Useful to generate report in Jenkins\r\n                        server\r\n  -P, --no_preprocessor_count\r\n                        By default, a #if will also increase the complexity.\r\n                        Adding this option to ignore them\r\n  -t WORKING_THREADS, --working_threads=WORKING_THREADS\r\n                        number of working threads. The default value is 1.\r\n```\r\n##Example use\r\n### Analyze a folder recursively: lizard mahjong_game/src\r\n<pre>\r\n==============================================================\r\n  NLOC    CCN  token  param    function@line@file\r\n--------------------------------------------------------------\r\n    10      2     29      2    start_new_player@26@./html_game.c\r\n   ...\r\n     6      1      3      0    set_shutdown_flag@449@./httpd.c\r\n    24      3     61      1    server_main@454@./httpd.c\r\n--------------------------------------------------------------\r\n2 file analyzed.\r\n==============================================================\r\nLOC    Avg.NLOC AvgCCN Avg.ttoken  function_cnt    file\r\n--------------------------------------------------------------\r\n    191     15      3        51        12     ./html_game.c\r\n    363     24      4        86        15     ./httpd.c\r\n\r\n======================================\r\n!!!! Warnings (CCN > 15) !!!!\r\n======================================\r\n    66     19    247      1    accept_request@64@./httpd.c\r\n=================================================================================\r\nTotal NLOC  Avg.NLOC  Avg CCN  Avg token  Fun Cnt  Warning cnt   Fun Rt   NLOC Rt  \r\n--------------------------------------------------------------------------------\r\n       554        20     4.07      71.15       27            1      0.04    0.12\r\n</pre>\r\n### Warnings only (in clang/gcc formation):lizard -w mahjong_game\r\n<pre>\r\n./src/html_ui/httpd.c:64: warning: accept_request has 19 CCN and 1 params (66 NLOC, 247 tokens)\r\n./src/mahjong_game/mj_table.c:109: warning: mj_table_update_state has 20 CCN and 1 params (72 NLOC, 255 tokens)\r\n</pre>\r\n## Using lizard as Python module\r\nYou can also use lizard as a Python module in your code:\r\n```python\r\n>>> import lizard\r\n>>> i = lizard.analyze_file(\"../cpputest/tests/AllTests.cpp\")\r\n>>> print i.__dict__\r\n{'nloc': 9, 'function_list': [<lizard.FunctionInfo object at 0x10bf7af10>], 'filename': '../cpputest/tests/AllTests.cpp'}\r\n>>> print i.function_list[0].__dict__\r\n{'cyclomatic_complexity': 1, 'token_count': 22, 'name': 'main', 'parameter_count': 2, 'nloc': 3, 'long_name': 'main( int ac , const char ** av )', 'start_line': 30}\r\n```\r\nYou can also use source code string instead of file. But you need to provide a file name (to identify the language).\r\n```python\r\n>>> i = lizard.analyze_file.analyze_source_code(\"AllTests.cpp\", \"int foo(){}\")\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}